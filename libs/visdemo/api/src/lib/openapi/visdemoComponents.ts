/**
 * Generated by @openapi-codegen
 *
 * @version 1.0
 */
import * as reactQuery from "@tanstack/react-query";
import { useVisdemoContext, VisdemoContext } from "./visdemoContext";
import type * as Fetcher from "./visdemoFetcher";
import { visdemoFetch } from "./visdemoFetcher";
import type * as Schemas from "./visdemoSchemas";

export type GetCompaniesError = Fetcher.ErrorWrapper<undefined>;

export type GetCompaniesResponse = Schemas.CompanyPresenter[];

export type GetCompaniesVariables = VisdemoContext["fetcherOptions"];

export const fetchGetCompanies = (
  variables: GetCompaniesVariables,
  signal?: AbortSignal,
) =>
  visdemoFetch<GetCompaniesResponse, GetCompaniesError, undefined, {}, {}, {}>({
    url: "/company",
    method: "get",
    ...variables,
    signal,
  });

export const useGetCompanies = <TData = GetCompaniesResponse,>(
  variables: GetCompaniesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetCompaniesResponse, GetCompaniesError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useVisdemoContext(options);
  return reactQuery.useQuery<GetCompaniesResponse, GetCompaniesError, TData>({
    queryKey: queryKeyFn({
      path: "/company",
      operationId: "getCompanies",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchGetCompanies({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  });
};

export type QueryOperation = {
  path: "/company";
  operationId: "getCompanies";
  variables: GetCompaniesVariables;
};
